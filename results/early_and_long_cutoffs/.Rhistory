training <- read.csv("/home/brian/hpc/local_r_method/training_data")
test <- read.csv("/home/brian/hpc/local_r_method/test_data")
library(rJava)
library(rJava)
library(DBI)
library(RJDBC)
vDriver = JDBC(driverClass="com.vertica.jdbc.Driver", classPath="~/Vertica/vertica-jdbc-7.2.3-0.jar")
source('~/hpc/r_model/single_script_logistic.R')
try(dbSendUpdate(gacon,deleteOldTable))
try(dbSendUpdate(gacon,rebuildTable))
try(dbSendUpdate(gacon, drop_training))
try(dbSendUpdate(gacon, drop_test))
try(dbSendUpdate(gacon,log_regression_training_table))
try(dbSendUpdate(gacon,log_regression_test_table))
# Build logistic regression model for long term play and spenders (delete previous iterations)
try(dbSendQuery(gacon, delete_spenders_model))
try(dbSendQuery(gacon, build_spenders_model))
try(dbSendQuery(gacon, delete_term_model))
try(dbSendQuery(gacon, build_term_model))
try(dbSendUpdate(gacon, delete_predicted_results))
try(dbSendUpdate(gacon, predicted_results_table))
# Evaluate models -- apply to test data and generate metrics e.g accuracy/sensitivity
try(dbSendUpdate(gacon, delete_check_accuracy))
try(dbSendUpdate(gacon, check_accuracy_table))
try(dbSendUpdate(gacon, delete_metrics))
try(dbSendUpdate(gacon, metrics_table))
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
spend_metrics <- try(dbGetQuery(gacon, get_spender_metrics))
spenders_summary <- try(dbGetQuery(gacon, summary_spenders_model))
term_summary <- try(dbGetQuery(gacon, summary_term_model))
spenders_summary
term_metrics
spend_metrics
colnames(training_data)
colnames(test_data)
test_data$android_or_not
training_data <- read.csv("/home/brian/hpc/local_r_method/training_data.csv", na.strings=c(""), stringsAsFactors = FALSE)
test_data <- read.csv("/home/brian/hpc/local_r_method/test_data.csv", na.strings=c(""), stringsAsFactors = FALSE)
colnames(test_data)
source('~/hpc/r_model/single_script_logistic.R', echo=TRUE)
term_summary
source('~/hpc/r_model/single_script_logistic.R')
term_summary
source('~/hpc/r_model/single_script.R')
try(dbSendUpdate(gacon,deleteOldTable))
try(dbSendUpdate(gacon,rebuildTable))
### Build regression model ###
## Run for different values of regression thresholds, longterm_cutoff, early_behaviour_cutoff
# Generate training and test subsets of regression table (first delete previous ones)
try(dbSendUpdate(gacon, drop_training))
try(dbSendUpdate(gacon, drop_test))
try(dbSendUpdate(gacon,lin_regression_training_table))
try(dbSendUpdate(gacon,lin_regression_test_table))
# Build linear regression model for long term play and spenders (delete previous iterations)
try(dbSendQuery(gacon, delete_spenders_model))
try(dbSendQuery(gacon, build_spenders_model))
try(dbSendQuery(gacon, delete_term_model))
try(dbSendQuery(gacon, build_term_model))
try(dbSendUpdate(gacon, delete_predicted_results))
try(dbSendUpdate(gacon, predicted_results_table))
# Evaluate models -- apply to test data and generate metrics e.g accuracy/sensitivity
try(dbSendUpdate(gacon, delete_check_accuracy))
try(dbSendUpdate(gacon, check_accuracy_table))
try(dbSendUpdate(gacon, delete_metrics))
try(dbSendUpdate(gacon, metrics_table))
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
spend_metrics <- try(dbGetQuery(gacon, get_spender_metrics))
spenders_summary <- try(dbGetQuery(gacon, summary_spenders_model))
term_summary <- try(dbGetQuery(gacon, summary_term_model))
term_summary
source('~/hpc/r_model/single_script_logistic.R')
spend_metrics
term_metrics
source('~/hpc/r_model/single_script.R')
get_spender_metrics <-strwrap(paste("
select
precision_spend,
sensitivity_spend,
specificity_spend,
((2*precision_spend*sensitivity_spend)/(precision_spend + sensitivity_spend) ) as f_score_spend,
accuracy_spend,
total_true_positive_spend,
total_false_negative_spend,
total_false_positive_spend,
total_true_negative_spend
from
metrics;
"),simplify=T,width=1e5)
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
spend_metrics <- try(dbGetQuery(gacon, get_spender_metrics))
spenders_summary <- try(dbGetQuery(gacon, summary_spenders_model))
term_summary <- try(dbGetQuery(gacon, summary_term_model))
gacon = dbConnect(vDriver, "jdbc:vertica://edinlin01/ga", "flynnb", "FlynNb01!")
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
spend_metrics <- try(dbGetQuery(gacon, get_spender_metrics))
spenders_summary <- try(dbGetQuery(gacon, summary_spenders_model))
term_summary <- try(dbGetQuery(gacon, summary_term_model))
get_term_metrics <-strwrap(paste("
select
precision_term,
sensitivity_term,
specificity_term,
((2*precision_term*sensitivity_term)/(precision_term + sensitivity_term) ) as f_score_term,
accuracy_term,
total_true_positive_term,
total_false_negative_term,
total_false_positive_term,
total_true_negative_term
from
metrics;
"),simplify=T,width=1e5)
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
term_metrics
source('~/hpc/r_model/single_script_logistic.R')
term_metrics
source('~/hpc/r_model/single_script_logistic.R')
term_metrcs
term_metrics
spend_metrics
source('~/hpc/r_model/single_script_logistic.R')
term_metrics
spend_metrics
get_spender_metrics <-strwrap(paste("
select
precision_spend,
sensitivity_spend,
specificity_spend,
((2*precision_spend*sensitivity_spend)/(precision_spend + sensitivity_spend) ) as f_score_spend,
accuracy_spend,
total_true_positive_spend,
total_false_negative_spend,
total_false_positive_spend,
total_true_negative_spend
from
metrics;
"),simplify=T,width=1e5)
get_term_metrics <-strwrap(paste("
select
precision_term,
sensitivity_term,
specificity_term,
((2*precision_term*sensitivity_term)/(precision_term + sensitivity_term) ) as f_score_term,
accuracy_term,
total_true_positive_term,
total_false_negative_term,
total_false_positive_term,
total_true_negative_term
from
metrics;
"),simplify=T,width=1e5)
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
spend_metrics <- try(dbGetQuery(gacon, get_spender_metrics))
gacon = dbConnect(vDriver, "jdbc:vertica://edinlin01/ga", "flynnb", "FlynNb01!")
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
spend_metrics <- try(dbGetQuery(gacon, get_spender_metrics))
spenders_summary <- try(dbGetQuery(gacon, summary_spenders_model))
term_summary <- try(dbGetQuery(gacon, summary_term_model))
term_metrics
spend_metrics
beta = 2 ## Factor sensitivity is more important than precision for F_beta score
get_spender_metrics <-strwrap(paste("
select
precision_spend,
sensitivity_spend,
specificity_spend,
((2*precision_spend*sensitivity_spend)/(precision_spend + sensitivity_spend) ) as f_score_spend,
(((1-", beta, " *", beta, ")*precision_spend*sensitivity_spend)/((precision_spend*", beta, ") + sensitivity_spend) ) as f_beta_spend,
accuracy_spend,
total_true_positive_spend,
total_false_negative_spend,
total_false_positive_spend,
total_true_negative_spend
from
metrics;
"),simplify=T,width=1e5)
get_spender_metrics
get_term_metrics <-strwrap(paste("
select
precision_term,
sensitivity_term,
specificity_term,
((2*precision_term*sensitivity_term)/(precision_term + sensitivity_term) ) as f_score_term,
(((1-(", beta, " *", beta, ")*precision_term*sensitivity_term)/((precision_term*", beta, ") + sensitivity_term) ) as f_beta_term,
accuracy_term,
total_true_positive_term,
total_false_negative_term,
total_false_positive_term,
total_true_negative_term
from
metrics;
"),simplify=T,width=1e5)
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
spend_metrics <- try(dbGetQuery(gacon, get_spender_metrics))
spenders_summary <- try(dbGetQuery(gacon, summary_spenders_model))
term_summary <- try(dbGetQuery(gacon, summary_term_model))
get_term_metrics <-strwrap(paste("
select
precision_term,
sensitivity_term,
specificity_term,
((2*precision_term*sensitivity_term)/(precision_term + sensitivity_term) ) as f_score_term,
( ( (1- (", beta, " *", beta, ") )*precision_term*sensitivity_term)/((precision_term*", beta, ") + sensitivity_term) ) as f_beta_term,
accuracy_term,
total_true_positive_term,
total_false_negative_term,
total_false_positive_term,
total_true_negative_term
from
metrics;
"),simplify=T,width=1e5)
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
term_metrics
spend_metrics
source('~/hpc/r_model/single_script_logistic.R')
get_spender_metrics <-strwrap(paste("
select
precision_spend,
sensitivity_spend,
specificity_spend,
((2*precision_spend*sensitivity_spend)/(precision_spend + sensitivity_spend) ) as f_score_spend,
(( (1-(", beta, " *", beta, " ) )*precision_spend*sensitivity_spend)/((precision_spend*", beta, ") + sensitivity_spend) ) as f_beta_spend,
accuracy_spend,
total_true_positive_spend,
total_false_negative_spend,
total_false_positive_spend,
total_true_negative_spend
from
metrics;
"),simplify=T,width=1e5)
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
spend_metrics <- try(dbGetQuery(gacon, get_spender_metrics))
spenders_summary <- try(dbGetQuery(gacon, summary_spenders_model))
term_summary <- try(dbGetQuery(gacon, summary_term_model))
vDriver = JDBC(driverClass="com.vertica.jdbc.Driver", classPath="~/Vertica/vertica-jdbc-7.2.3-0.jar")
gacon = dbConnect(vDriver, "jdbc:vertica://edinlin01/ga", "flynnb", "FlynNb01!")
term_metrics <- try(dbGetQuery(gacon, get_term_metrics))
spend_metrics <- try(dbGetQuery(gacon, get_spender_metrics))
spenders_summary <- try(dbGetQuery(gacon, summary_spenders_model))
term_summary <- try(dbGetQuery(gacon, summary_term_model))
term_metrics
term_metrics[1]
term_metrics[2]
precision_term[1] =term_metrics[1]
precision_list_term <- vector()
precision_list_term <- term_metrics[1]
precision_list_term <- term_metrics[2]
precision_list_term
precision_list_term <- term_metrics[1]
precision_list_term[2] <- term_metrics[2]
precision_list_term[2]
precision_list_term[1] <- term_metrics[2]
precision_list_term <- vector()
precision_list_term <- term_metrics[1]
precision_list_term[2] <- term_metrics[2]
precision_list_term
test_mat <- matrix()
test_mat[1,2] <- term_metrics[2]
term_metrics
precision_list_term[4] <- term_metrics[1]
precision_list_term[3] <- term_metrics[1]
term_metrics[7]
term_metrics[10]
spend_metrics[10]
source('~/hpc/r_model/single_script_logistic.R')
source('~/hpc/r_model/single_script_logistic.R')
source('~/hpc/r_model/single_script_logistic.R')
source('~/hpc/r_model/single_script_logistic.R')
specificity_list_spend
tp_spend
source('~/hpc/r_model/single_script_logistic.R')
precision_list_term
for (i in precision_list_term){
print i
}
write(precision_list_term, "precision_term.dat")
precision_df_term.df = as.data.frame(do.call(cbind, precision_list_term))
write(precision_df_term.df, "precision_term.dat")
write.csv(precision_df_term.df, "precision_term.csv")
precision_df_term.df = as.data.frame(do.call(cbind, precision_list_term))
write.csv(precision_df_term.df, "/home/brian/hpc/r_model/logistic_auroc/precision_term.csv")
term_df <- data.frame(sensitivity_list_term, specificity_list_term)
term_df
write.csv(term_df, "/home/brian/hpc/r_model/logistic_auroc/term_test.csv")
specificity_list_term
sensitivity_list_term
term_df <- data.frame(sensitivity_list_term, specificity_list_term)
term_df
term_df <- ""
term_df
term_df <- data.frame(sensitivity_list_term, specificity_list_term)
term_df
sensitivity_list_term
specificity_list_term
term_df <- ""
term_df <- as.data.frame(rbind(sensitivity_list_term, specificity_list_term)
term_df <- as.data.frame(rbind(sensitivity_list_term, specificity_list_term))
term_df
names(term_df) <- (c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
term_df <- ""
term_df <- as.data.frame(rbind(sensitivity_list_term, specificity_list_term, precision_list_term, f1_list_term,
f_beta_list_term, accuracy_list_term, tp_term, fn_term, fp_term, tn_term    ))
write.csv(term_df, "/home/brian/hpc/r_model/logistic_auroc/term_output.csv")
term_df
write.csv(term_df, "/home/brian/hpc/r_model/logistic_auroc/term_output.csv")
coerced.df <- data.frame(lappy(term_df, as.numeric), stringsAsFactors = FALSE)
coerced.df <- data.frame(lapply(term_df, as.numeric), stringsAsFactors = FALSE)
write.csv(coerced.df, "/home/brian/hpc/r_model/logistic_auroc/term_output.csv")
100 - term_metrics[1]
1_minus_spec_term <- vector()
term_df <- ""
term_df <- as.data.frame(rbind(sensitivity_list_term, specificity_list_term, precision_list_term, f1_list_term,
f_beta_list_term, accuracy_list_term, tp_term, fn_term, fp_term, tn_term))
term_results.df <- data.frame(lapply(term_df, as.numeric), stringsAsFactors = FALSE)
rownames(term_results.df) <- c("Sensitivity,", "Specificity", "Precision", "F1 Score","F_beta Score",
"Accuracy", "True Positives", "False Negatives", "False Positives", "True Negatives")
write.csv(term_results.df, "/home/brian/hpc/r_model/logistic_auroc/term_output.csv")
spend_df <- ""
spend_df <- as.data.frame(rbind(sensitivity_list_spend, specificity_list_spend, precision_list_spend, f1_list_spend,
f_beta_list_spend, accuracy_list_spend, tp_spend, fn_spend, fp_spend, tn_spend))
spend_results.df <- data.frame(lapply(spend_df, as.numeric), stringsAsFactors = FALSE)
rownames(spend_results.df) <- c("Sensitivity,", "Specificity", "Precision", "F1 Score","F_beta Score",
"Accuracy", "True Positives", "False Negatives", "False Positives", "True Negatives")
write.csv(spend_results.df, "/home/brian/hpc/r_model/logistic_auroc/spend_output.csv")
sen
test_set
source('~/hpc/r_model/base_script_with_branches/plot_auroc.R')
model_summary
if(build_churn_model == 1 ) {
for(longterm_cutoff in longterm_low:longterm_high) { # can generate different results depending on def of long term
source("vertica_model.R")
source("update_metrics_vectors.R")
source("random.R)"
}
}
setid<- 0
source('~/thesis/base_script.R')
factor_variables
source('~/thesis/base_script.R')
factor_variables
colnames(train)
features
features_list
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
setid
features
old_features <- features
if(setdiff(features, old_features) > 0 || setdiff(old_features, features) >0 ) {
setid <- setid  + 1
}
features
old_features
if(length(setdiff(features, old_features)) > 0 || length(setdiff(old_features, features)) >0 ) {
setid <- setid  + 1
}
setid
setid <- 0
source('~/thesis/base_script.R')
setid
setid <- 0
exclude_numeric_features_list <- c(base_num_session)
exclude_numeric_features_list
numeric_session_features <- c(base_num_session)
numeric_session_features
source('~/thesis/base_script.R')
features
length(setdiff(features, old_features))
setdiff(old_features, features))
setdiff(old_features, features)
length(setdiff(old_features, features))
source('~/thesis/base_script.R')
setid<-0
source('~/thesis/base_script.R')
features
old_features
features == old_features
old_features <- 0
features == old_features
old_features <- features
features != old_features
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
features
fit
to_fit
model_summary
model
source('~/thesis/base_script.R')
features
to_fit
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/feature_selection.R')
source('~/thesis/feature_selection.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
colnames(train)
source('~/thesis/base_script.R')
numeric_user_features <-c(deviceCount)
numeric_user_features
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
summary(train)
colnames(train)
write.csv(train, "~thesis/training_data.csv")
write.csv(train, "training_data.csv")
write.csv(test, "test_data.csv")
a<- "number_of_events"
b<- "total_time_ms"
d <- "fieldDeviceTypeLast"
e <- "fieldPlatformLast"
f <- "missions_started"
g <- "missions_completed"
h < "missions_failed"
i <- "fieldFacebookFriendsAmountCount"
j<- "fieldFreeBeeVideoWatchedFirst"
h <- "missions_failed"
user_features <- c()
numeric_user_features <-c()
exclude_user_features <- user_features
exclude_numeric_features_list <- numeric_user_features
#From daily sessions table - categorical & numerical
session_features <- c("gender")
numeric_session_features <- c(a,b)
exclude_session_features <- c("gender")
exclude_numeric_session_features_list <- c()
numeric_session_features
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
to_fit
to_fit
source('~/thesis/base_script.R')
to_fit
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
factor_variables
colnames(train)
colnames(train)
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/feature_selection.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
features
features_list
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
longterm_high
build_spend_model
build_hybrid_spend
build_hybrid_churn
source('~/thesis/base_script.R')
longterm_high < 16
train$longTermPlayer
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
source('~/thesis/base_script.R')
setwd("/home/brian/thesis/outputs/early/results")
source('~/thesis/outputs/early/results/get_max_f_vals.R')
source('~/thesis/outputs/early/results/get_max_f_vals.R')
f_vals_spend
f_vals
source('~/thesis/outputs/early/results/get_max_f_vals.R')
require(sqldf)
setwd("/home/brian/thesis/outputs/new_early/results")
setwd("/home/brian/thesis/outputs/new_early/results")
source('~/thesis/outputs/new_early/get_max_f_vals.R')
f_vals
f_vals_spend
